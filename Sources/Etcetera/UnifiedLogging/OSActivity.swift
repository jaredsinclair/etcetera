//
//  OSActivity.swift
//  Etcetera
//
//  Created by Jared Sinclair on 8/15/15.
//  Copyright Â© 2015 Nice Boy LLC. All rights reserved.
//
// swiftlint:disable line_length - I dislike multi-line function signatures.

import os.activity

/// Swift-native, quality-of-life wrapper around os.activity.
///
/// ## Recommended Usage
///
/// It is recommended that you do **not** re-use an instance of a given
/// Activity across more than one activity "session", where "session" is
/// understood within the domain knowledge of your application. Rather,
/// initialize a new activity at the start of a discrete unit of that
/// activity, `enter()`-ing the activity at the beginning, and performing
/// the `Leave` block at the end:
///
///     extension Activity {
///         static func processImage() -> Activity {
///             return Activity("ImageLib processImage")
///         }
///     }
///
///     func process(_ image: Image) -> Image {
///         let leave = Activity.processImage().enter()
///         defer { leave() }
///         // process the image...
///         return result
///     }
public struct Activity: @unchecked Sendable {

    // MARK: - Typealiases

    /// The signature of the closure returned from `enter()`.
    public typealias Leave = @Sendable () -> Void

    // MARK: - Nested Types

    /// Swift-native type that corresponds to OS_ACTIVITY_FLAGs.
    public struct Options: OptionSet {
        public let rawValue: UInt32

        public init(rawValue: UInt32) {
            self.rawValue = rawValue
        }

        public var flagValue: os_activity_flag_t { os_activity_flag_t(rawValue) }

        /// Equivalent to `OS_ACTIVITY_FLAG_DETACHED`.
        public static let detached = Options(rawValue: OS_ACTIVITY_FLAG_DETACHED.rawValue)

        /// Equivalent to `OS_ACTIVITY_FLAG_IF_NONE_PRESENT`.
        public static let ifNonePresent = Options(rawValue: OS_ACTIVITY_FLAG_IF_NONE_PRESENT.rawValue)
    }

    // MARK: - Private Properties

    /// The underlying activity.
    private let reference: os_activity_t

    // MARK: - Init/Factory

    /// Initializes a new activity.
    ///
    /// - parameter label: The label to use when creating the underlying activity.
    ///
    /// - parameter parent: The parent activity to which the new underlying
    /// activity will be related. Defaults to `os_activity_current()`.
    ///
    /// - parameter options: The flags to use when creating the underlying
    /// activity. Consult the os.activity documentation for more information
    /// about the usage of these flags.
    ///
    /// - parameter dso: A `__dso_handle` from the calling module. There is no
    /// reason for you to override the default argument, as passing the
    /// incorrect handle will prevent activity information from appearing in the
    /// the console output. The default argument is, per the Swift compiler's
    /// fundamentals, always defined using the value from the caller's context,
    /// not the callee's context.
    public init(_ label: StaticString, parent: Activity = .current(), options: Options = [], dso: UnsafeRawPointer = #dsohandle) {
        self.init(label.withUTF8Buffer { buffer -> os_activity_t in
            guard let base = buffer.baseAddress else {
                fatalError("Unable to acquire a buffer pointer to the `label`.")
            }
            return base.withMemoryRebound(to: Int8.self, capacity: buffer.count, { pointer in
                _os_activity_create(.init(mutating: dso), pointer, parent.reference, options.flagValue)
            })
        })
    }

    /// - returns: Returns a new Activity instance wrapping `OS_ACTIVITY_NONE`.
    public static func none() -> Activity {
        let OS_ACTIVITY_NONE = unsafeBitCast(dlsym(UnsafeMutableRawPointer(bitPattern: -2), "_os_activity_none"), to: Unmanaged<os_activity_t>.self)
        return Activity(OS_ACTIVITY_NONE.takeUnretainedValue())
    }

    /// - returns: Returns a new Activity instance wrapping `OS_ACTIVITY_CURRENT`.
    public static func current() -> Activity {
        let OS_ACTIVITY_CURRENT = unsafeBitCast(dlsym(UnsafeMutableRawPointer(bitPattern: -2), "_os_activity_current"), to: Unmanaged<os_activity_t>.self)
        return Activity(OS_ACTIVITY_CURRENT.takeUnretainedValue())
    }

    /// Designated initializer, wrapping the underlying activity.
    ///
    /// - parameter reference: The underyling activity.
    private init(_ reference: os_activity_t) {
        self.reference = reference
    }

    // MARK: - Public Methods

    /// Label an activity that is auto-generated by AppKit/UIKit with a name
    /// that is useful for debugging macro-level user actions.
    ///
    /// Effectively a proxy for `os_activity_label_useraction`. See the docs
    /// for that function for more information on appropriate usage, since the
    /// same guidelines generally apply to this method.
    ///
    /// - parameter userAction: A static string like "share button pressed".
    ///
    /// - parameter dso: A `__dso_handle` from the calling module. There is no
    /// reason for you to override the default argument, as passing the
    /// incorrect handle will prevent activity information from appearing in the
    /// the console output. The default argument is, per the Swift compiler's
    /// fundamentals, always defined using the value from the caller's context,
    /// not the callee's context.
    public static func labelUserAction(_ userAction: StaticString, fromContainingBinary dso: UnsafeRawPointer = #dsohandle) {
        userAction.withUTF8Buffer { buffer in
            guard let base = buffer.baseAddress else {
                fatalError("Unable to acquire a buffer pointer to the `label`.")
            }
            base.withMemoryRebound(to: Int8.self, capacity: buffer.count, { pointer in
                _os_activity_label_useraction(.init(mutating: dso), pointer)
            })
        }
    }

    /// Enters an activity.
    ///
    /// This method **must** be balanced by performing the `Leave` closure:
    ///
    ///     let leave = myActivity.enter()
    ///     // do things...
    ///     leave()
    ///
    /// - returns: Returns a closure that leaves the activity.
    public func enter() -> Leave {
        let scope = ActivityScope(reference)
        scope.enter()
        return {
            scope.leave()
        }
    }

}

private final class ActivityScope: @unchecked Sendable {

    private let reference: os_activity_t
    private let state = UnsafeMutablePointer<os_activity_scope_state_s>.allocate(capacity: 1)

    init(_ reference: os_activity_t) {
        self.reference = reference
        state.initialize(to: os_activity_scope_state_s())
    }

    deinit {
        state.deinitialize(count: 1)
        state.deallocate()
    }

    func enter() {
        os_activity_scope_enter(reference, state)
    }

    func leave() {
        os_activity_scope_leave(state)
    }

}
